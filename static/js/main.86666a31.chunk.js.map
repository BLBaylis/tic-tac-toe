{"version":3,"sources":["components/game/Game.module.scss","components/flipper/Flipper.module.scss","components/gameSquare/GameSquare.module.scss","App.module.scss","components/settings/Settings.module.scss","components/grid/Grid.module.scss","components/flipper/Flipper.js","components/settings/Settings.js","components/grid/Grid.js","components/gameSquare/GameSquare.js","gameLogic/lineGeneratorFunctions/generateLinesFromLineNum.js","gameLogic/lineGeneratorFunctions/getCenterSquareIndex.js","gameLogic/gameEndingConditions.js","gameLogic/moveSimulationFunctions/transformStateObj.js","gameLogic/compMoveLogic/findAllLinesWithXNumberOfSquareType.js","gameLogic/helperFunctions.js","gameLogic/compMoveLogic/findLongestWinnableLines.js","gameLogic/compMoveLogic/chooseFromMoveChoicesBasedOnOppositionLines.js","gameLogic/compMoveLogic/processLines.js","gameLogic/compMoveLogic/getBestMove.js","gameLogic/compMoveLogic/calculateCompMove.js","gameLogic/lineGeneratorFunctions/generateAllLines.js","gameLogic/lineGeneratorFunctions/generateLinesFromSquareIndex.js","gameLogic/moveSimulationFunctions/simulateGame.js","gameLogic/moveSimulationFunctions/recordGameResults.js","components/game/Game.js","App.js","index.js"],"names":["module","exports","btn","winner","flipperContainer","flipper","front","back","flipped","gameSquare","user","comp","app","appHeader","heading","settings","grid","grid-3","grid-5","grid-7","Flipper","props","gameFlipped","styles","FrontComponent","React","cloneElement","flip","BackComponent","react_default","a","createElement","className","concat","Settings","onClick","argsFromState","Grid","gridClassName","gridSize","generateSquares","GameSquare","value","generateRowFromRowNum","rowNum","lineLength","Array","fill","map","x","index","generateColumnFromColNum","colNum","getCenterSquareIndex","n","rowChecker","squareIndex","gameBoard","arguments","length","undefined","Math","floor","every","columnChecker","winCheck","centerChecked","columnsChecked","rowsChecked","Error","center","columns","rows","some","diagonalChecker","filter","transformStateObj","squareNo","prevState","outcome","board","userTurn","gameLog","turnNo","gameLogClone","slice","boardClone","winChecked","pow","drawCheck","nonGameLogStateChanges","Object","objectSpread","checkLineForXNumberOfSquareType","quantity","line","squareType","findAllLinesWithXNumberOfSquareType","lines","findAllUntakenSquares","arr","doesLineContainOppositionSquare","lineType","chooseRandom","arrClone","randomIndex","random","splice","findLongestWinnableLines","winnableLines","longestWinnableLines","winnableLinesClone","chooseFromMoveChoicesBasedOnOppositionLines","moveChoices","oppositionLinesObjs","moveChoicesClone","oppositionLinesObjsClone","bestMoveObjs","reduce","total","curr","amountOfLinesSquareIndexIsIn","bestMove","getFlattenedArrOfAllUntakenSpacesDupesIncluded","y","countLinesBySquareIndex","processLines","playerWithoutTempoLines","processedplayerWithoutTempoLines","getBestMove","playerWithTempoLines","possibleMoves","processedUserLines","calculateCompMove","centerIndex","allLines","_findLongestWinnableL","longestPossibleWinnableCompLinesLength","longestPossibleWinnableCompLines","_findLongestWinnableL2","longestPossibleWinnableUserLinesLength","longestPossibleWinnableUserLines","remainingBoard","generateRows","generateColumns","generateDiagonals","generateEdges","firstAndLastSquare","edges","generateRowFromSquareIndex","generateColumnFromSquareIndex","generateMiddleEdgeSquares","generateAllLines","diagonals","middleEdgeSquares","simulateGame","state","movesTaken","firstMove","initialState","maxMoves","simulateCompMove","simulateRandomMove","indicesArr","remainingSquares","computerMoveIndex","recordGameResults","result","counters","makeGameLogEasierToRead","randomGamesLog","push","userCounter","userWinsLog","compCounter","drawCounter","noOutcome","noOutcomeLog","includes","Game","handleClick","updatedState","_this","setState","restart","undoTurn","lastTurnState","redoTurn","nextTurnState","changeSetting","settingType","newSetting","obj","gameSquare_GameSquare","key","simulateManyGamesAndRecordResults","amountOfGames","gamesPlayed","console","log","_this2","this","Fragment","flipper_Flipper","grid_Grid","settings_Settings","Component","App","game_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.86666a31.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Game_btn__3Ovl-\",\"winner\":\"Game_winner__3fSVd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flipperContainer\":\"Flipper_flipperContainer__Ybe43\",\"flipper\":\"Flipper_flipper__C8sGo\",\"front\":\"Flipper_front__2vyNY\",\"back\":\"Flipper_back__3Kl2R\",\"flipped\":\"Flipper_flipped__3-RcQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameSquare\":\"GameSquare_gameSquare__2aLYP\",\"user\":\"GameSquare_user__2UVOX\",\"comp\":\"GameSquare_comp__3GtR9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3YMaN\",\"appHeader\":\"App_appHeader__3q520\",\"heading\":\"App_heading__2ixp2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__hnrRa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__28WBm\",\"grid-3\":\"Grid_grid-3__3IjS2\",\"grid-5\":\"Grid_grid-5__15GyL\",\"grid-7\":\"Grid_grid-7__8ExxA\"};","import React from \"react\";\r\nimport styles from \"./Flipper.module.scss\";\r\n\r\nconst Flipper = props => {\r\n  const flipped = props.gameFlipped ? styles.flipped : null;\r\n  const FrontComponent = React.cloneElement(props.front, { flip: props.flip });\r\n  const BackComponent = React.cloneElement(props.back, { flip: props.flip });\r\n  return (\r\n    <div className={styles.flipperContainer}>\r\n      <div className={`${styles.flipper} ${flipped}`}>\r\n        <div className={styles.front}>{FrontComponent}</div>\r\n        <div className={styles.back}>{BackComponent}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Flipper;\r\n","import React from \"react\";\r\nimport styles from \"./Settings.module.scss\";\r\n\r\nconst Settings = props => {\r\n  return (\r\n    <div className={styles.settings}>\r\n      <h2>SETTINGS</h2>\r\n      <p>Who goes first?</p>\r\n      <button\r\n        onClick={() => props.onClick(\"firstMove\", \"user\", props.argsFromState)}\r\n      >\r\n        ME\r\n      </button>\r\n      <button\r\n        onClick={() => props.onClick(\"firstMove\", \"comp\", props.argsFromState)}\r\n      >\r\n        COMPUTER\r\n      </button>\r\n      <p>Grid Size</p>\r\n      <button onClick={() => props.onClick(\"gridSize\", 3, props.argsFromState)}>\r\n        3 x 3<br />\r\n        (recommended)\r\n      </button>\r\n      <button onClick={() => props.onClick(\"gridSize\", 5, props.argsFromState)}>\r\n        5 x 5\r\n      </button>\r\n      <button onClick={() => props.onClick(\"gridSize\", 7, props.argsFromState)}>\r\n        7 x 7\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport styles from \"./Grid.module.scss\";\r\n\r\nconst Grid = props => {\r\n  const gridClassName = styles[`grid-${props.argsFromState.gridSize}`];\r\n  return (\r\n    <div className={gridClassName}>\r\n      {props.generateSquares(props.argsFromState)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\nimport styles from \"./GameSquare.module.scss\";\r\n\r\nconst GameSquare = props => {\r\n  const className = props.value\r\n    ? `${styles.gameSquare} ${styles[props.value]}`\r\n    : styles.gameSquare;\r\n  return <button className={className} onClick={props.onClick} />;\r\n};\r\n\r\nexport default GameSquare;\r\n","export const generateRowFromRowNum = (rowNum, lineLength) => {\r\n  return Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => rowNum * lineLength + index);\r\n};\r\n\r\nexport const generateColumnFromColNum = (colNum, lineLength) => {\r\n  return Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => colNum + index * lineLength);\r\n};\r\n","const getCenterSquareIndex = gridSize => {\r\n  const n = (gridSize - 1) / 2;\r\n  return gridSize * n + n;\r\n};\r\n\r\nexport default getCenterSquareIndex;\r\n","import {\r\n  generateRowFromRowNum,\r\n  generateColumnFromColNum\r\n} from \"./lineGeneratorFunctions/generateLinesFromLineNum\";\r\nimport getCenterSquareIndex from \"./lineGeneratorFunctions/getCenterSquareIndex\";\r\n\r\nconst rowChecker = (squareIndex, gameBoard, lineLength = 3) => {\r\n  const rowNum = Math.floor(squareIndex / lineLength);\r\n  const arr = generateRowFromRowNum(rowNum, lineLength);\r\n  if (\r\n    arr.every(\r\n      x => gameBoard[x] === gameBoard[rowNum * lineLength] && gameBoard[x]\r\n    )\r\n  ) {\r\n    return gameBoard[squareIndex];\r\n  }\r\n  return false;\r\n};\r\n\r\nconst columnChecker = (squareIndex, gameBoard, lineLength = 3) => {\r\n  const colNum = squareIndex % lineLength;\r\n  const arr = generateColumnFromColNum(colNum, lineLength);\r\n  if (arr.every(x => gameBoard[x] === gameBoard[colNum] && gameBoard[x])) {\r\n    return gameBoard[squareIndex];\r\n  }\r\n  return false;\r\n};\r\n\r\nconst diagonalChecker = (center, gameBoard, lineLength = 3) => {\r\n  const diag1 = Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => index * lineLength + index);\r\n  const diag2 = Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => (index + 1) * lineLength - (index + 1));\r\n  if (\r\n    [diag1, diag2].some(x =>\r\n      x.every(x => gameBoard[x] === gameBoard[center] && gameBoard[x])\r\n    )\r\n  ) {\r\n    return gameBoard[center];\r\n  }\r\n  return false;\r\n};\r\n\r\nconst winCheck = (gameBoard, lineLength = 3) => {\r\n  let centerChecked, columnsChecked, rowsChecked;\r\n  if (lineLength % 2 === 0 || lineLength < 3) {\r\n    throw new Error(\"LineLength needs to be an odd number bigger than 3\");\r\n  }\r\n  const center = getCenterSquareIndex(lineLength);\r\n  const columns = Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => index);\r\n  const rows = Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => index * lineLength);\r\n  centerChecked = rowChecker(center, gameBoard, lineLength);\r\n  if (!centerChecked) {\r\n    centerChecked = columnChecker(center, gameBoard, lineLength);\r\n  }\r\n  if (!centerChecked) {\r\n    centerChecked = diagonalChecker(center, gameBoard, lineLength);\r\n  }\r\n  if (centerChecked) {\r\n    return centerChecked;\r\n  }\r\n  columnsChecked = columns.filter(x => columnChecker(x, gameBoard, lineLength));\r\n  if (columnsChecked.length) {\r\n    return gameBoard[columnsChecked[0]];\r\n  }\r\n  rowsChecked = rows.filter(x => rowChecker(x, gameBoard, lineLength));\r\n  if (rowsChecked.length) {\r\n    return gameBoard[rowsChecked[0]];\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const drawCheck = (turnNo, gridSize) => {\r\n  if (turnNo >= gridSize ** 2) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default winCheck;\r\n","import winCheck, { drawCheck } from \"../gameEndingConditions\";\r\n\r\nconst transformStateObj = (squareNo, prevState) => {\r\n  const { board, userTurn, gridSize } = prevState;\r\n  let { gameLog, turnNo } = prevState;\r\n  let outcome;\r\n  let gameLogClone = gameLog.slice();\r\n  const boardClone = board.slice();\r\n  if (board[squareNo]) {\r\n    return;\r\n  }\r\n  if (gameLog[turnNo + 1]) {\r\n    gameLogClone = gameLog.slice(0, turnNo + 1);\r\n  }\r\n  boardClone[squareNo] = userTurn ? \"user\" : \"comp\";\r\n  turnNo++;\r\n  let winChecked = winCheck(boardClone, gridSize);\r\n  if (winChecked) {\r\n    outcome = winChecked;\r\n  } else if (drawCheck(turnNo, gridSize)) {\r\n    outcome = \"draw\";\r\n  }\r\n  const nonGameLogStateChanges = {\r\n    board: boardClone,\r\n    turnNo: turnNo,\r\n    userTurn: !userTurn,\r\n    outcome: outcome\r\n  };\r\n  return {\r\n    gameLog: gameLogClone.concat(nonGameLogStateChanges),\r\n    gridSize: gridSize,\r\n    ...nonGameLogStateChanges\r\n  };\r\n};\r\n\r\nexport default transformStateObj;\r\n","const findAllLinesWithXNumberOfSquareType = (\r\n  quantity,\r\n  board,\r\n  squareType,\r\n  lines\r\n) => {\r\n  lines = lines.filter(x =>\r\n    checkLineForXNumberOfSquareType(quantity, x, squareType, board)\r\n  );\r\n  return lines;\r\n};\r\n\r\nexport const isOtherSpaceEmpty = (line, board) => {\r\n  return checkLineForXNumberOfSquareType(1, line, null, board);\r\n};\r\n\r\n// delete function below if it doesnt get used\r\n\r\nexport const getLineWithXNumberOfSquareType = (\r\n  quantity,\r\n  line,\r\n  squareType,\r\n  board\r\n) => {\r\n  if (checkLineForXNumberOfSquareType(quantity, line, squareType, board)) {\r\n    return line;\r\n  }\r\n};\r\n\r\nexport const checkLineForXNumberOfSquareType = (\r\n  quantity,\r\n  line,\r\n  squareType,\r\n  board\r\n) => {\r\n  const matchingSquares = line.filter(x => board[x] === squareType);\r\n  if (matchingSquares.length === quantity) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default findAllLinesWithXNumberOfSquareType;\r\n","export const findAllUntakenSquares = (arr, board) => {\r\n  const arrClone = arr.slice();\r\n  return arrClone.filter(x => board[x] === null);\r\n};\r\n\r\nexport const doesLineContainOppositionSquare = (line, lineType, board) => {\r\n  return line.every(x => board[x] === null || board[x] === lineType);\r\n};\r\n\r\nexport const chooseRandom = (arr, board) => {\r\n  const arrClone = arr.slice();\r\n  let randomIndex = Math.floor(Math.random() * arrClone.length);\r\n  while (board[arrClone[randomIndex]] !== null && arrClone.length < 0) {\r\n    arrClone.splice(randomIndex, 1);\r\n    randomIndex = Math.floor(Math.random() * arrClone.length);\r\n  }\r\n  if (board[arr[randomIndex]] === null) {\r\n    return arr[randomIndex];\r\n  }\r\n  return false;\r\n};\r\n","import findAllLinesWithXNumberOfSquareType from \"./findAllLinesWithXNumberOfSquareType\";\r\nimport { doesLineContainOppositionSquare } from \"../helperFunctions\";\r\n\r\n//findLongestWinaableLines\r\n\r\n/*Arguments : \r\n  lineType can be null or \"comp\" or \"user\", the 3 states a gridSquare can be in.\r\n*/\r\nconst findLongestWinnableLines = (lineType, board, gridSize, winnableLines) => {\r\n  let longestWinnableLines = [];\r\n  let length = gridSize + 1;\r\n  let winnableLinesClone = winnableLines.slice();\r\n  let linesOfCurrLength = [];\r\n  while (!longestWinnableLines.length && length > 0) {\r\n    length--;\r\n    linesOfCurrLength = findAllLinesWithXNumberOfSquareType(\r\n      length,\r\n      board,\r\n      lineType,\r\n      winnableLinesClone\r\n    );\r\n    longestWinnableLines = linesOfCurrLength.filter(x =>\r\n      doesLineContainOppositionSquare(x, lineType, board)\r\n    );\r\n  }\r\n  if (!longestWinnableLines.length) {\r\n    return { lineLength: length, lines: [] };\r\n  }\r\n  return { lineLength: length, lines: longestWinnableLines };\r\n};\r\n\r\nexport default findLongestWinnableLines;\r\n","import { chooseRandom } from \"../helperFunctions\";\r\n\r\nconst chooseFromMoveChoicesBasedOnOppositionLines = (\r\n  moveChoices,\r\n  oppositionLinesObjs,\r\n  board\r\n) => {\r\n  const moveChoicesClone = moveChoices.slice();\r\n  const oppositionLinesObjsClone = oppositionLinesObjs.slice();\r\n  const bestMoveObjs = moveChoicesClone.reduce(\r\n    (total, curr) => {\r\n      if (oppositionLinesObjsClone[curr] === undefined) {\r\n        return total;\r\n      }\r\n      if (\r\n        oppositionLinesObjsClone[curr][\"amountOfLinesSquareIndexIsIn\"] >\r\n        total[0][\"amountOfLinesSquareIndexIsIn\"]\r\n      ) {\r\n        total = [].concat(oppositionLinesObjsClone[curr]);\r\n        return total;\r\n      }\r\n      if (\r\n        oppositionLinesObjsClone[curr][\"amountOfLinesSquareIndexIsIn\"] ===\r\n        total[0][\"amountOfLinesSquareIndexIsIn\"]\r\n      ) {\r\n        total = total.concat(oppositionLinesObjsClone[curr]);\r\n        return total;\r\n      }\r\n      return total;\r\n    },\r\n    [{ amountOfLinesSquareIndexIsIn: [] }]\r\n  );\r\n  if (bestMoveObjs[0][\"amountOfLinesSquareIndexIsIn\"] < 1) {\r\n    return chooseRandom(moveChoices, board);\r\n  }\r\n  const bestMove = bestMoveObjs.map(x => x.squareIndex);\r\n  if (bestMove.length > 1) {\r\n    return chooseRandom(bestMove, board);\r\n  }\r\n  return bestMove;\r\n};\r\n\r\nexport default chooseFromMoveChoicesBasedOnOppositionLines;\r\n","/*process lines takes the lines */\r\n\r\nconst processLines = (playerWithoutTempoLines, board, gridSize) => {\r\n  const processedplayerWithoutTempoLines = getFlattenedArrOfAllUntakenSpacesDupesIncluded(\r\n    playerWithoutTempoLines,\r\n    board\r\n  );\r\n  return countLinesBySquareIndex(processedplayerWithoutTempoLines, gridSize);\r\n};\r\n\r\nconst getFlattenedArrOfAllUntakenSpacesDupesIncluded = (arr, board) => {\r\n  const arrClone = arr.slice();\r\n  const associateEachUntakenSquareIndexWithTheLineItIsIn = arrClone.map(x =>\r\n    x.filter(y => board[y] === null)\r\n  );\r\n  return associateEachUntakenSquareIndexWithTheLineItIsIn.reduce(\r\n    (total, curr) => total.concat(curr),\r\n    []\r\n  );\r\n};\r\n\r\nconst countLinesBySquareIndex = (arr, gridSize) => {\r\n  const arrClone = arr.slice();\r\n  return arrClone.reduce((total, curr) => {\r\n    if (total[curr] === undefined) {\r\n      total[curr] = { squareIndex: curr, amountOfLinesSquareIndexIsIn: 1 };\r\n    } else {\r\n      total[curr][\"amountOfLinesSquareIndexIsIn\"]++;\r\n    }\r\n    return total;\r\n  }, Array(gridSize ** 2).fill());\r\n};\r\n\r\nexport default processLines;\r\n","import { findAllUntakenSquares } from \"../helperFunctions\";\r\nimport chooseFromMoveChoicesBasedOnOppositionLines from \"./chooseFromMoveChoicesBasedOnOppositionLines\";\r\nimport processLines from \"./processLines\";\r\n\r\nconst getBestMove = (\r\n  playerWithTempoLines,\r\n  playerWithoutTempoLines,\r\n  board,\r\n  gridSize\r\n) => {\r\n  const possibleMoves = playerWithTempoLines.reduce((total, curr) => {\r\n    return total.concat(findAllUntakenSquares(curr, board));\r\n  }, []);\r\n  const processedUserLines = processLines(\r\n    playerWithoutTempoLines,\r\n    board,\r\n    gridSize\r\n  );\r\n  return chooseFromMoveChoicesBasedOnOppositionLines(\r\n    possibleMoves,\r\n    processedUserLines,\r\n    board\r\n  );\r\n};\r\nexport default getBestMove;\r\n","import findLongestWinnableLines from \"./findLongestWinnableLines\";\r\nimport getBestMove from \"./getBestMove\";\r\nimport { chooseRandom } from \"../helperFunctions\";\r\n\r\nconst calculateCompMove = (centerIndex, allLines, argsFromState) => {\r\n  const centerValue = argsFromState.board[centerIndex];\r\n  if (!centerValue) {\r\n    return centerIndex;\r\n  }\r\n  if (argsFromState.gridSize === 3 && argsFromState.turnNo === 3) {\r\n    if (\r\n      [0, 8].filter(x => argsFromState.board[x] === \"user\").length === 2 ||\r\n      [2, 6].filter(x => argsFromState.board[x] === \"user\").length === 2\r\n    ) {\r\n      return chooseRandom([1, 3, 5, 7], argsFromState.board);\r\n    }\r\n  }\r\n  const {\r\n    lineLength: longestPossibleWinnableCompLinesLength,\r\n    lines: longestPossibleWinnableCompLines\r\n  } = {\r\n    ...findLongestWinnableLines(\r\n      \"comp\",\r\n      argsFromState.board,\r\n      argsFromState.gridSize,\r\n      allLines\r\n    )\r\n  };\r\n  const {\r\n    lineLength: longestPossibleWinnableUserLinesLength,\r\n    lines: longestPossibleWinnableUserLines\r\n  } = {\r\n    ...findLongestWinnableLines(\r\n      \"user\",\r\n      argsFromState.board,\r\n      argsFromState.gridSize,\r\n      allLines\r\n    )\r\n  };\r\n  if (\r\n    longestPossibleWinnableCompLinesLength >=\r\n    longestPossibleWinnableUserLinesLength\r\n  ) {\r\n    if (longestPossibleWinnableCompLinesLength === 0) {\r\n      const remainingBoard = argsFromState.board\r\n        .slice()\r\n        .map((x, index) => {\r\n          if (x !== null) {\r\n            return null;\r\n          }\r\n          return index;\r\n        })\r\n        .filter(x => x !== null);\r\n      return chooseRandom(remainingBoard, argsFromState.board);\r\n    }\r\n    return getBestMove(\r\n      longestPossibleWinnableCompLines,\r\n      longestPossibleWinnableUserLines,\r\n      argsFromState.board,\r\n      argsFromState.gridSize\r\n    );\r\n  } else {\r\n    return getBestMove(\r\n      longestPossibleWinnableUserLines,\r\n      longestPossibleWinnableCompLines,\r\n      argsFromState.board,\r\n      argsFromState.gridSize\r\n    );\r\n  }\r\n};\r\n\r\nexport default calculateCompMove;\r\n","import {\r\n  generateRowFromRowNum,\r\n  generateColumnFromColNum\r\n} from \"./generateLinesFromLineNum\";\r\n\r\nimport {\r\n  generateRowFromSquareIndex,\r\n  generateColumnFromSquareIndex\r\n} from \"./generateLinesFromSquareIndex\";\r\n\r\nconst generateAllLines = lineLength => {\r\n  return {\r\n    allLines: [].concat(\r\n      generateColumns(lineLength),\r\n      generateRows(lineLength),\r\n      generateDiagonals(lineLength)\r\n    ),\r\n    columns: generateColumns(lineLength),\r\n    rows: generateRows(lineLength),\r\n    diagonals: generateDiagonals(lineLength),\r\n    edges: generateEdges(lineLength),\r\n    middleEdgeSquares: generateMiddleEdgeSquares(lineLength)\r\n  };\r\n};\r\n\r\nconst generateRows = lineLength => {\r\n  const rowNo = Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => index);\r\n  return rowNo.map(x => generateRowFromRowNum(x, lineLength));\r\n};\r\n\r\nconst generateColumns = lineLength => {\r\n  const colNo = Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => index);\r\n  return colNo.map(x => generateColumnFromColNum(x, lineLength));\r\n};\r\n\r\nconst generateDiagonals = lineLength => {\r\n  const diag1 = Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => index * lineLength + index);\r\n  const diag2 = Array(lineLength)\r\n    .fill()\r\n    .map((x, index) => (index + 1) * lineLength - (index + 1));\r\n  return [diag1, diag2];\r\n};\r\n\r\nconst generateEdges = lineLength => {\r\n  const firstAndLastSquare = [0, lineLength ** 2 - 1];\r\n  let edges = firstAndLastSquare.map(x =>\r\n    generateRowFromSquareIndex(x, lineLength)\r\n  );\r\n  return (edges = edges.concat(\r\n    firstAndLastSquare.map(x => generateColumnFromSquareIndex(x, lineLength))\r\n  ));\r\n};\r\n\r\nexport const generateMiddleEdgeSquares = lineLength => {\r\n  return generateEdges(lineLength)\r\n    .map(x => x.slice(1, x.length - 1))\r\n    .reduce((total, curr) => total.concat(curr), []);\r\n};\r\n\r\nexport default generateAllLines;\r\n","import {\r\n  generateRowFromRowNum,\r\n  generateColumnFromColNum\r\n} from \"./generateLinesFromLineNum\";\r\n\r\nexport const generateRowFromSquareIndex = (squareIndex, lineLength) => {\r\n  const rowNum = Math.floor(squareIndex / lineLength);\r\n  return generateRowFromRowNum(rowNum, lineLength);\r\n};\r\n\r\nexport const generateColumnFromSquareIndex = (squareIndex, lineLength) => {\r\n  const colNum = squareIndex % lineLength;\r\n  return generateColumnFromColNum(colNum, lineLength);\r\n};\r\n","import calculateCompMove from \"../../gameLogic/compMoveLogic/calculateCompMove\";\r\nimport generateAllLines from \"../../gameLogic/lineGeneratorFunctions/generateAllLines\";\r\nimport getCenterSquareIndex from \"../../gameLogic/lineGeneratorFunctions/getCenterSquareIndex\";\r\nimport transformStateObj from \"./transformStateObj\";\r\nimport { findAllUntakenSquares } from \"../helperFunctions\";\r\n\r\nexport const simulateGame = argsFromState => {\r\n  let state;\r\n  let movesTaken = 0;\r\n  const { firstMove, gridSize } = argsFromState;\r\n  let initialState = {\r\n    board: Array(gridSize ** 2).fill(null),\r\n    turnNo: 0,\r\n    userTurn: firstMove === \"user\" ? true : false,\r\n    gameLog: [\r\n      {\r\n        board: Array(gridSize ** 2).fill(null),\r\n        turnNo: 0,\r\n        userTurn: firstMove === \"user\" ? true : false,\r\n        outcome: undefined\r\n      }\r\n    ],\r\n    outcome: undefined,\r\n    gridSize: gridSize\r\n  };\r\n  const maxMoves = argsFromState.gridSize ** 2;\r\n  if (argsFromState.firstMove === \"comp\") {\r\n    state = simulateCompMove(initialState);\r\n    movesTaken = 1;\r\n  }\r\n  for (movesTaken; movesTaken < maxMoves; movesTaken = movesTaken + 2) {\r\n    state = simulateRandomMove(initialState);\r\n    if (state.outcome !== undefined) {\r\n      return state;\r\n    }\r\n    state = simulateCompMove(state);\r\n    if (state.outcome !== undefined) {\r\n      return state;\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nconst simulateRandomMove = prevState => {\r\n  let indicesArr = Array(prevState.gridSize)\r\n    .fill()\r\n    .map((x, index) => index);\r\n  let remainingSquares = findAllUntakenSquares(indicesArr, prevState.board);\r\n  let randomIndex = Math.floor(Math.random() * remainingSquares.length);\r\n  return transformStateObj(remainingSquares[randomIndex], prevState);\r\n};\r\n\r\nexport const simulateCompMove = prevState => {\r\n  const centerIndex = getCenterSquareIndex(prevState.gridSize);\r\n  const lines = generateAllLines(prevState.gridSize);\r\n  const computerMoveIndex = calculateCompMove(\r\n    centerIndex,\r\n    lines.allLines,\r\n    prevState\r\n  );\r\n  return transformStateObj(computerMoveIndex, prevState);\r\n};\r\n","export default (result, counters) => {\r\n  let gameLog;\r\n  if (Math.random() * 10000 > 9990) {\r\n    gameLog = makeGameLogEasierToRead(result.gameLog);\r\n    counters.randomGamesLog.push(gameLog);\r\n  }\r\n  if (result.outcome === \"user\") {\r\n    counters.userCounter++;\r\n    gameLog = makeGameLogEasierToRead(result.gameLog);\r\n    counters.userWinsLog.push(gameLog);\r\n  } else if (result.outcome === \"comp\") {\r\n    counters.compCounter++;\r\n  } else if (result.outcome === \"draw\") {\r\n    counters.drawCounter++;\r\n  } else {\r\n    counters.noOutcome++;\r\n    gameLog = makeGameLogEasierToRead(result.gameLog);\r\n    counters.noOutcomeLog.push(gameLog);\r\n  }\r\n  return counters;\r\n};\r\n\r\nconst makeGameLogEasierToRead = gameLog => {\r\n  return gameLog.slice().reduce((total, curr) => {\r\n    curr.board.map((x, index) => {\r\n      if (x !== null && !total.includes(index)) {\r\n        total.push(index);\r\n      }\r\n      return x;\r\n    });\r\n    return total;\r\n  }, []);\r\n};\r\n","import React from \"react\";\nimport styles from \"./Game.module.scss\";\nimport Flipper from \"../flipper/Flipper\";\nimport Settings from \"../settings/Settings\";\nimport Grid from \"../grid/Grid\";\nimport GameSquare from \"../gameSquare/GameSquare\";\nimport transformStateObj from \"../../gameLogic/moveSimulationFunctions/transformStateObj\";\nimport {\n  simulateGame,\n  simulateCompMove\n} from \"../../gameLogic/moveSimulationFunctions/simulateGame\";\nimport recordGameResults from \"../../gameLogic/moveSimulationFunctions/recordGameResults\";\n\nclass Game extends React.Component {\n  state = {\n    board: Array(9).fill(null),\n    gameLog: [\n      {\n        board: Array(9).fill(null),\n        turnNo: 0,\n        userTurn: true,\n        outcome: undefined\n      }\n    ],\n    turnNo: 0,\n    userTurn: true,\n    outcome: undefined,\n    gridSize: 3,\n    firstMove: \"user\",\n    gameFlipped: false\n  };\n\n  handleClick = (squareNo, argsFromState) => {\n    let updatedState = transformStateObj(squareNo, argsFromState);\n    if (updatedState.outcome === undefined) {\n      updatedState = simulateCompMove(updatedState);\n    }\n    this.setState(updatedState);\n  };\n\n  restart = (firstMove, gridSize) => {\n    let updatedState;\n    let initialState = {\n      board: Array(gridSize ** 2).fill(null),\n      turnNo: 0,\n      userTurn: firstMove === \"user\" ? true : false,\n      gameLog: [\n        {\n          board: Array(gridSize ** 2).fill(null),\n          turnNo: 0,\n          userTurn: firstMove === \"user\" ? true : false,\n          outcome: undefined\n        }\n      ],\n      outcome: undefined,\n      gridSize: gridSize\n    };\n    if (firstMove === \"comp\") {\n      updatedState = simulateCompMove(initialState);\n      this.setState(updatedState);\n    } else {\n      this.setState(initialState);\n    }\n  };\n\n  undoTurn = () => {\n    this.setState(prevState => {\n      let lastTurnState = prevState.gameLog[prevState.turnNo - 2];\n      if (!lastTurnState) {\n        return;\n      }\n      if (lastTurnState.userTurn === false) {\n        lastTurnState = prevState.gameLog[prevState.turnNo - 1];\n      }\n      return {\n        board: lastTurnState.board,\n        turnNo: lastTurnState.turnNo,\n        userTurn: lastTurnState.userTurn,\n        outcome: lastTurnState.outcome\n      };\n    });\n  };\n\n  redoTurn = () => {\n    this.setState(prevState => {\n      const nextTurnState = prevState.gameLog[prevState.turnNo + 2];\n      if (!nextTurnState) {\n        return;\n      }\n      return {\n        board: nextTurnState.board,\n        turnNo: nextTurnState.turnNo,\n        userTurn: nextTurnState.userTurn,\n        outcome: nextTurnState.outcome\n      };\n    });\n  };\n\n  changeSetting = (settingType, newSetting, argsFromState) => {\n    const obj = {};\n    obj[settingType] = newSetting;\n    this.setState(obj, () => {\n      if (settingType === \"firstMove\") {\n        this.restart(newSetting, argsFromState.gridSize);\n      } else {\n        this.restart(argsFromState.firstMove, newSetting);\n      }\n    });\n  };\n\n  flip = () => {\n    this.setState(prevState => ({ gameFlipped: !prevState.gameFlipped }));\n  };\n\n  generateSquares = argsFromState => {\n    const boardClone = argsFromState.board.slice();\n    return Array(argsFromState.gridSize ** 2)\n      .fill()\n      .map((x, index) => (\n        <GameSquare\n          key={index}\n          value={boardClone[index]}\n          onClick={() => this.handleClick(index, argsFromState)}\n        />\n      ));\n  };\n\n  simulateManyGamesAndRecordResults = (amountOfGames, argsFromState) => {\n    let result;\n    let counters = {\n      userCounter: 0,\n      compCounter: 0,\n      drawCounter: 0,\n      noOutcome: 0,\n      userWinsLog: [],\n      noOutcomeLog: [],\n      randomGamesLog: []\n    };\n    const { gridSize, firstMove } = argsFromState;\n    for (let gamesPlayed = 0; gamesPlayed < amountOfGames; gamesPlayed++) {\n      result = simulateGame(argsFromState);\n      console.log(`game ${gamesPlayed} finished`);\n      counters = recordGameResults(result, counters);\n      this.restart(firstMove, gridSize);\n    }\n    console.log(counters);\n  };\n\n  render() {\n    const state = { ...this.state };\n    const argsFromState = {\n      board: state.board,\n      gridSize: state.gridSize,\n      turnNo: state.turnNo,\n      outcome: state.outcome,\n      gameLog: state.gameLog,\n      userTurn: state.userTurn\n    };\n    return (\n      <React.Fragment>\n        <Flipper\n          flip={this.flip}\n          gameFlipped={state.gameFlipped}\n          front={\n            <Grid\n              argsFromState={argsFromState}\n              generateSquares={this.generateSquares}\n            />\n          }\n          back={\n            <Settings\n              argsFromState={{\n                gridSize: state.gridSize,\n                firstMove: state.firstMove\n              }}\n              onClick={this.changeSetting}\n            />\n          }\n        />\n        <button\n          className={styles.btn}\n          onClick={() => this.restart(state.firstMove, state.gridSize)}\n        >\n          restart\n        </button>\n        <button className={styles.btn} onClick={this.undoTurn}>\n          undo\n        </button>\n        <button className={styles.btn} onClick={this.redoTurn}>\n          redo\n        </button>\n        <button\n          className={styles.btn}\n          onClick={() =>\n            this.simulateManyGamesAndRecordResults(10000, {\n              firstMove: state.firstMove,\n              gridSize: state.gridSize\n            })\n          }\n        >\n          debug\n        </button>\n        <button className={styles.btn} onClick={this.flip}>\n          settings\n        </button>\n        <h2 className={styles.winner}>outcome: {state.outcome}!</h2>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport Game from \"./components/game/Game\";\nimport styles from \"./App.module.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={styles.app}>\n        <header className={styles.appHeader}>\n          <h1 className = {styles.heading}>Brad's Tic Tac Toe</h1>\n        </header>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}